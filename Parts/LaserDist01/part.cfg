PART
{
  // --- general parameters ---
  name = distometer100x
  module = Part
  author = Steven Mading

  // --- asset parameters ---
  mesh = model/model.mu
  scale = 1
  rescaleFactor = 1.0
  iconCenter = 0, -0.1, 0

  // --- node definitions ---
  // surface attachment point:
  node_attach = 0.0, -0.1, -0.06, 0.0, 0.0, 1.0

  // --- Tech tree ---
  TechRequired = flightControl
  entryCost = 8000

  // --- editor parameters ---
  cost = 1000
  category = Science
  subcategory = 0
  title = Beamer 100x Dist-o-meter 
  manufacturer = Sensible Sensors
  description = A long-distance Laser!  Wow!  that probably blows stuff up right?  Well, no.  It just measures things.  Specifically this laser measures distances to the ground or any other object it hits, along whichever line it happens to be pointed.  WARNING: It does tend to use a lot of electricity to run the powerful long-distance laser.  Range=100,000m^H^H^H^H^H^H^H^Hinfinite for now.
  bulkheadProfiles = srf

  // attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
  attachRules = 0,1,0,1,0

  // --- standard part parameters ---
  mass = 0.02
  dragModelType = default
  maximum_drag = 0.2
  minimum_drag = 0.2
  angularDrag = 2
  crashTolerance = 5
  maxTemp = 1000

  MODULE
  {
    name = LaserDistModule

    // Note from the mod author, Steve:
    //
    //    Due to a problem I still haven't worked out, all LaserDist parts that have a nonzero
    //    value for MaxBendX or MaxBendY need the same nonzero value as each other.
    // 
    //    In other words, this would be an acceptable configuration:
    //        LaserDist100x has MaxBendX = 0
    //        LaserDist200x has MaxBendX = 0
    //        LaserDist500x has MaxBendX = 0
    //
    //    And this would be an acceptable configuration:
    //        LaserDist100x has MaxBendX = 5
    //        LaserDist200x has MaxBendX = 5
    //        LaserDist500x has MaxBendX = 5
    //
    //    And this would be an acceptable configuration:
    //        LaserDist100x has MaxBendX = 0
    //        LaserDist200x has MaxBendX = 15 
    //        LaserDist500x has MaxBendX = 15
    //
    //    And this would be an acceptable configuration:
    //        LaserDist100x has MaxBendX = 0
    //        LaserDist200x has MaxBendX = 0
    //        LaserDist500x has MaxBendX = 20
    //
    //    But if you try to do something like this, it won't work:
    //        LaserDist100x has MaxBendX = 0
    //        LaserDist200x has MaxBendX = 50
    //        LaserDist500x has MaxBendX = 15
    //    Because there are two unequal nonzero values present among the set.
    //
    //    Why?
    //    ----
    //    There is something about the floating slider widget in the context menus that can't seem
    //    to handle having two different LaserDist instances with different min/max values as each
    //    other. It's behaving as if it's a static member - only one universal value for the whole class.
    //    When you edit the value for one instance at runtime, it seems to change for all the other
    //    ones too.
    //
    //    Until I solve that problem, for now all LaserDist parts will have to adhere to that rule
    //    described above.
    // 
    //
    // This part can't bend the laser beam at at all:
    MaxBendX = 0
    MaxBendY = 0

    MaxDistance = 50000000
    SensorType = LASERDIST
    ElectricPerSecond = 0.1
    CPUGreedyPercent = 5.0
  }
  MODULE
  {
    name = ModuleCargoPart
    packedVolume = 4
    stackableQuantity = 4
  }
}
